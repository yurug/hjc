data questions_target =
| ForUser (string)

data list ('a) =
| Nil
| Cons ('a, list ('a))

data template ('a) =
| TAtom (string, template ('a))
| TCode ('a, template ('a))
| TNil

data boolean =
| True
| False

data text = {
  bold   : boolean;
  italic : boolean;
  value  : string
}

data statement =
| Text (template (text))

data context =
| QCM    (list (statement), list (int))
| Grader (template (string), template (string), template (string))

data question = {
  id         : template (string);
  title      : template (string);
  tags       : template (string);
  difficulty : int;
  statement  : template (statement);
  context    : template (context)
}

data questions =
| Question (question)
| Section (template (string), template (questions))

def section title questions = Section title questions

def question id title tags difficulty statement context = Question {
  id = id;
  title = title;
  tags = tags;
  difficulty = difficulty;
  statement = statement;
  context = context
}

def text t = Text t

def choices t =
  t ? {
  | TAtom s t => Cons (Text (TAtom s TNil)) (choices t)
  | TCode s t => Cons s (choices t)
  | TNil => Nil
  }

def expected_choices t =
  t ? {
  {* We ignore trailing strings, since we are expecting a list of
     integers. *}
  | TAtom s t => expected_choices t
  | TCode s t => Cons s (expected_choices t)
  | TNil      => Nil
  }

def grader expected_file imported_files command =
    Grader expected_file imported_files command